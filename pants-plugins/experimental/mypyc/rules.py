from dataclasses import dataclass
import logging

from pants.backend.python.goals.setup_py import (
    SetupKwargs,
    SetupKwargsRequest,
    GenerateSetupPyRequest,
    GeneratedSetupPy,
    FinalizedSetupKwargs,
)
from pants.backend.python.util_rules.dists import (
    distutils_repr,
    rules as dists_rules,
)
from pants.backend.python.util_rules.python_sources import (
    PythonSourceFilesRequest,
    PythonSourceFiles,
    StrippedPythonSourceFiles,
)
from pants.engine.fs import (
    CreateDigest,
    Digest,
    FileContent,
)
from pants.engine.rules import Get, collect_rules, rule
from pants.engine.target import Target, TransitiveTargets, TransitiveTargetsRequest
from pants.engine.unions import UnionRule

from experimental.mypyc.target_types import MyPycPythonDistribution
from pants.util.logging import LogLevel

logger = logging.getLogger(__name__)


class MyPycGenerateSetupPyRequest(GenerateSetupPyRequest):
    pass

class MyPycSetupKwargsRequest(SetupKwargsRequest):
    @classmethod
    def is_applicable(cls, target: Target) -> bool:
        return isinstance(target, MyPycPythonDistribution)


SETUP_BOILERPLATE = """
# DO NOT EDIT THIS FILE -- AUTOGENERATED BY PANTS
# Target: {target_address_spec}
# mypy: ignore-errors

from setuptools import setup, Extension
from mypyc.build import mypycify

setup(**{setup_kwargs_str})
"""


# @dataclass(frozen=True)
# class GeneratedSetupPy:
#     digest: Digest


@rule(level=LogLevel.DEBUG)
async def generate_setup_py(request: GenerateSetupPyRequest) -> GeneratedSetupPy:
    # Generate the setup script.
    logger.error("asd,mnsadkjhasdhjaksdh9823y21893791ioujkljs")
    finalized_setup_kwargs = await Get(
        FinalizedSetupKwargs, GenerateSetupPyRequest, request
    )
    setup_py_content = SETUP_BOILERPLATE.format(
        target_address_spec=request.exported_target.target.address.spec,
        setup_kwargs_str=distutils_repr(finalized_setup_kwargs.kwargs),
    ).encode()
    logger.info(setup_py_content)
    files_to_create = [
        FileContent("setup.py", setup_py_content),
        FileContent("MANIFEST.in", b"include *.py"),
    ]
    digest = await Get(Digest, CreateDigest(files_to_create))
    return GeneratedSetupPy(digest)


@rule(level=LogLevel.DEBUG)
async def mypyc_setup_kwargs(request: MyPycSetupKwargsRequest) -> SetupKwargs:
    logger.info(f"This is the request {request.target}")
    transitive_targets = await Get(
        TransitiveTargets,
        TransitiveTargetsRequest([request.target.address]),
    )

    logger.info(f"This is the tarnsitive {transitive_targets}")
    python_source_files = (
        await Get(
            PythonSourceFiles,
            PythonSourceFilesRequest(
                transitive_targets.closure, include_resources=False, include_files=False
            ),
        ),
    )
    python_files = list(python_source_files[0].source_files.snapshot.files)
    # source_root = python_source_files[0].source_roots[0]

    logger.info(f"Here are the source files {python_source_files}")
    logger.info(f"Here are the source files {python_files}")
    kwargs = SetupKwargs(
        {
            **request.explicit_kwargs,
            # "ext_modules": "mypycify(['hellofib/__init__.py'])",
        },
        address=request.target.address,
    )
    logger.info(f"These are the args {kwargs.kwargs}")
    return kwargs


def rules():
    return (
        *collect_rules(),
        UnionRule(SetupKwargsRequest, MyPycSetupKwargsRequest),
        # UnionRule(GenerateSetupPyRequest, MyPycGenerateSetupPyRequest),
    )
